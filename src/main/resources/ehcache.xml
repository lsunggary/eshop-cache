<?xml version="1.0" encoding="UTF-8"?>
<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="http://ehcache.org/ehcache.xsd"
         updateCheck="false">

    <!-- diskStore: ehcache支持内存+磁盘+堆外内存，几个层级的缓存 -->
    <!-- 这里设置一下，一般不用 -->
    <diskStore path="java.io.tmpdir/Tmp_EhCache" />

    <!-- defaultCache，是默认的缓存策略 -->
    <!-- 如果指定的缓存策略没有找到，那么就用这个默认的缓存策略 -->
    <!-- eternal：如果设置为true，那么timeout就没有效果，缓存就有一直存在，一般默认为false -->
    <!-- maxElementsInMemory：内存中可以缓存多少个缓存条目，需要计算 -->
    <!-- orverflowToDisk：如果内存不够的时候，是否溢出到磁盘 -->
    <!-- diskPersistent：是否启用磁盘持久化的机制，在jvm崩溃的时候和重启的时候。不用 -->
    <!-- timeToIdleSeconds: 对象最大的闲置的时间，如果超出闲置的时间，就会过期 -->
    <!-- timeToLiveSeconds: 对象最多存活时间，超过这个时间，就过期 -->
    <!-- memoryStoreEvictionPolicy：当缓存数量达到了最大的指定条目数的时候，需要采用一定的算法去清除缓存，这里使用LRU算法 -->
    <defaultCache
            eternal="false"
            maxElementsInMemory="1000"
            overflowToDisk="false"
            diskPersistent="false"
            timeToIdleSeconds="0"
            timeToLiveSeconds="0"
            memoryStoreEvictionPolicy="LRU" />

    <!-- 手动指定的缓存策略 -->
    <!-- 一个应用，缓存不同的数据 -->
    <!-- 不同的数据，不同的缓存策略 -->
    <cache
            name="local"
            eternal="false"
            maxElementsInMemory="1000"
            overflowToDisk="false"
            diskPersistent="false"
            timeToIdleSeconds="0"
            timeToLiveSeconds="0"
            memoryStoreEvictionPolicy="LRU" />

</ehcache>